<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: msg.proto
//   Date: 2012-10-17 09:09:33

namespace Skynet\Doozer\Request {

  class Verb extends \DrSlump\Protobuf\Enum {
    const GET = 1;
    const SET = 2;
    const DEL = 3;
    const REV = 5;
    const WAIT = 6;
    const NOP = 7;
    const WALK = 9;
    const GETDIR = 14;
    const STAT = 16;
    const ACCESS = 99;
  }
}
namespace Skynet\Doozer {

  class Request extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $tag = null;
    
    /**  @var int - \Skynet\Doozer\Request\Verb */
    public $verb = null;
    
    /**  @var string */
    public $path = null;
    
    /**  @var string */
    public $value = null;
    
    /**  @var int */
    public $other_tag = null;
    
    /**  @var int */
    public $offset = null;
    
    /**  @var int */
    public $rev = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Skynet.Doozer.Request');

      // OPTIONAL INT32 tag = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM verb = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "verb";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Skynet\Doozer\Request\Verb';
      $descriptor->addField($f);

      // OPTIONAL STRING path = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES value = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 other_tag = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "other_tag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 offset = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "offset";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 rev = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "rev";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tag> has a value
     *
     * @return boolean
     */
    public function hasTag(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tag> value
     *
     * @return \Skynet\Doozer\Request
     */
    public function clearTag(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tag> value
     *
     * @return int
     */
    public function getTag(){
      return $this->_get(1);
    }
    
    /**
     * Set <tag> value
     *
     * @param int $value
     * @return \Skynet\Doozer\Request
     */
    public function setTag( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <verb> has a value
     *
     * @return boolean
     */
    public function hasVerb(){
      return $this->_has(2);
    }
    
    /**
     * Clear <verb> value
     *
     * @return \Skynet\Doozer\Request
     */
    public function clearVerb(){
      return $this->_clear(2);
    }
    
    /**
     * Get <verb> value
     *
     * @return int - \Skynet\Doozer\Request\Verb
     */
    public function getVerb(){
      return $this->_get(2);
    }
    
    /**
     * Set <verb> value
     *
     * @param int - \Skynet\Doozer\Request\Verb $value
     * @return \Skynet\Doozer\Request
     */
    public function setVerb( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(4);
    }
    
    /**
     * Clear <path> value
     *
     * @return \Skynet\Doozer\Request
     */
    public function clearPath(){
      return $this->_clear(4);
    }
    
    /**
     * Get <path> value
     *
     * @return string
     */
    public function getPath(){
      return $this->_get(4);
    }
    
    /**
     * Set <path> value
     *
     * @param string $value
     * @return \Skynet\Doozer\Request
     */
    public function setPath( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(5);
    }
    
    /**
     * Clear <value> value
     *
     * @return \Skynet\Doozer\Request
     */
    public function clearValue(){
      return $this->_clear(5);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(5);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \Skynet\Doozer\Request
     */
    public function setValue( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <other_tag> has a value
     *
     * @return boolean
     */
    public function hasOtherTag(){
      return $this->_has(6);
    }
    
    /**
     * Clear <other_tag> value
     *
     * @return \Skynet\Doozer\Request
     */
    public function clearOtherTag(){
      return $this->_clear(6);
    }
    
    /**
     * Get <other_tag> value
     *
     * @return int
     */
    public function getOtherTag(){
      return $this->_get(6);
    }
    
    /**
     * Set <other_tag> value
     *
     * @param int $value
     * @return \Skynet\Doozer\Request
     */
    public function setOtherTag( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <offset> has a value
     *
     * @return boolean
     */
    public function hasOffset(){
      return $this->_has(7);
    }
    
    /**
     * Clear <offset> value
     *
     * @return \Skynet\Doozer\Request
     */
    public function clearOffset(){
      return $this->_clear(7);
    }
    
    /**
     * Get <offset> value
     *
     * @return int
     */
    public function getOffset(){
      return $this->_get(7);
    }
    
    /**
     * Set <offset> value
     *
     * @param int $value
     * @return \Skynet\Doozer\Request
     */
    public function setOffset( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <rev> has a value
     *
     * @return boolean
     */
    public function hasRev(){
      return $this->_has(9);
    }
    
    /**
     * Clear <rev> value
     *
     * @return \Skynet\Doozer\Request
     */
    public function clearRev(){
      return $this->_clear(9);
    }
    
    /**
     * Get <rev> value
     *
     * @return int
     */
    public function getRev(){
      return $this->_get(9);
    }
    
    /**
     * Set <rev> value
     *
     * @param int $value
     * @return \Skynet\Doozer\Request
     */
    public function setRev( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace Skynet\Doozer\Response {

  class Err extends \DrSlump\Protobuf\Enum {
    const OTHER = 127;
    const TAG_IN_USE = 1;
    const UNKNOWN_VERB = 2;
    const READONLY = 3;
    const TOO_LATE = 4;
    const REV_MISMATCH = 5;
    const BAD_PATH = 6;
    const MISSING_ARG = 7;
    const RANGE = 8;
    const NOTDIR = 20;
    const ISDIR = 21;
    const NOENT = 22;
  }
}
namespace Skynet\Doozer {

  class Response extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $tag = null;
    
    /**  @var int */
    public $flags = null;
    
    /**  @var int */
    public $rev = null;
    
    /**  @var string */
    public $path = null;
    
    /**  @var string */
    public $value = null;
    
    /**  @var int */
    public $len = null;
    
    /**  @var int - \Skynet\Doozer\Response\Err */
    public $err_code = null;
    
    /**  @var string */
    public $err_detail = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Skynet.Doozer.Response');

      // OPTIONAL INT32 tag = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 flags = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "flags";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 rev = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "rev";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING path = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES value = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 len = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "len";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM err_code = 100
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 100;
      $f->name      = "err_code";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Skynet\Doozer\Response\Err';
      $descriptor->addField($f);

      // OPTIONAL STRING err_detail = 101
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 101;
      $f->name      = "err_detail";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tag> has a value
     *
     * @return boolean
     */
    public function hasTag(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tag> value
     *
     * @return \Skynet\Doozer\Response
     */
    public function clearTag(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tag> value
     *
     * @return int
     */
    public function getTag(){
      return $this->_get(1);
    }
    
    /**
     * Set <tag> value
     *
     * @param int $value
     * @return \Skynet\Doozer\Response
     */
    public function setTag( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <flags> has a value
     *
     * @return boolean
     */
    public function hasFlags(){
      return $this->_has(2);
    }
    
    /**
     * Clear <flags> value
     *
     * @return \Skynet\Doozer\Response
     */
    public function clearFlags(){
      return $this->_clear(2);
    }
    
    /**
     * Get <flags> value
     *
     * @return int
     */
    public function getFlags(){
      return $this->_get(2);
    }
    
    /**
     * Set <flags> value
     *
     * @param int $value
     * @return \Skynet\Doozer\Response
     */
    public function setFlags( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <rev> has a value
     *
     * @return boolean
     */
    public function hasRev(){
      return $this->_has(3);
    }
    
    /**
     * Clear <rev> value
     *
     * @return \Skynet\Doozer\Response
     */
    public function clearRev(){
      return $this->_clear(3);
    }
    
    /**
     * Get <rev> value
     *
     * @return int
     */
    public function getRev(){
      return $this->_get(3);
    }
    
    /**
     * Set <rev> value
     *
     * @param int $value
     * @return \Skynet\Doozer\Response
     */
    public function setRev( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(5);
    }
    
    /**
     * Clear <path> value
     *
     * @return \Skynet\Doozer\Response
     */
    public function clearPath(){
      return $this->_clear(5);
    }
    
    /**
     * Get <path> value
     *
     * @return string
     */
    public function getPath(){
      return $this->_get(5);
    }
    
    /**
     * Set <path> value
     *
     * @param string $value
     * @return \Skynet\Doozer\Response
     */
    public function setPath( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(6);
    }
    
    /**
     * Clear <value> value
     *
     * @return \Skynet\Doozer\Response
     */
    public function clearValue(){
      return $this->_clear(6);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(6);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \Skynet\Doozer\Response
     */
    public function setValue( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <len> has a value
     *
     * @return boolean
     */
    public function hasLen(){
      return $this->_has(8);
    }
    
    /**
     * Clear <len> value
     *
     * @return \Skynet\Doozer\Response
     */
    public function clearLen(){
      return $this->_clear(8);
    }
    
    /**
     * Get <len> value
     *
     * @return int
     */
    public function getLen(){
      return $this->_get(8);
    }
    
    /**
     * Set <len> value
     *
     * @param int $value
     * @return \Skynet\Doozer\Response
     */
    public function setLen( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <err_code> has a value
     *
     * @return boolean
     */
    public function hasErrCode(){
      return $this->_has(100);
    }
    
    /**
     * Clear <err_code> value
     *
     * @return \Skynet\Doozer\Response
     */
    public function clearErrCode(){
      return $this->_clear(100);
    }
    
    /**
     * Get <err_code> value
     *
     * @return int - \Skynet\Doozer\Response\Err
     */
    public function getErrCode(){
      return $this->_get(100);
    }
    
    /**
     * Set <err_code> value
     *
     * @param int - \Skynet\Doozer\Response\Err $value
     * @return \Skynet\Doozer\Response
     */
    public function setErrCode( $value){
      return $this->_set(100, $value);
    }
    
    /**
     * Check if <err_detail> has a value
     *
     * @return boolean
     */
    public function hasErrDetail(){
      return $this->_has(101);
    }
    
    /**
     * Clear <err_detail> value
     *
     * @return \Skynet\Doozer\Response
     */
    public function clearErrDetail(){
      return $this->_clear(101);
    }
    
    /**
     * Get <err_detail> value
     *
     * @return string
     */
    public function getErrDetail(){
      return $this->_get(101);
    }
    
    /**
     * Set <err_detail> value
     *
     * @param string $value
     * @return \Skynet\Doozer\Response
     */
    public function setErrDetail( $value){
      return $this->_set(101, $value);
    }
  }
}

